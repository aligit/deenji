# .github/workflows/deploy.yml
name: Build and Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/deenji-app

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        # Add this step
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        timeout-minutes: 20
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          repository: aligit/deenji-deployment
          token: ${{ secrets.DEPLOYMENT_PAT }}
          path: deploy

      - name: Debug directory contents
        run: |
          ls -la
          ls -la deploy

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: SUPABASE_ANON_KEY,DATABASE_URL,GOOGLE_API_KEY,REGISTRY,IMAGE_NAME
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p ~/deployment

            # Debug - check if files exist in the current working directory
            echo "Current directory: $(pwd)"
            ls -la

            # Copy deployment files
            scp -r deploy/* ~/deployment/

            # Execute deployment script
            cd ~/deployment
            chmod +x deploy.sh
            ./deploy.sh "$REGISTRY" "$IMAGE_NAME" "$SUPABASE_ANON_KEY" "$DATABASE_URL" "$GOOGLE_API_KEY"
