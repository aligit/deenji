# .github/workflows/deploy.yml
name: Build and Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/deenji-app

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        # Add this step
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        timeout-minutes: 20
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: SUPABASE_ANON_KEY,DATABASE_URL,GOOGLE_API_KEY,REGISTRY,IMAGE_NAME
          script: |
            # Ensure directory exists
            mkdir -p ~/deenji-project
            cd ~/deenji-project

            # Create or update docker-compose.yml
            cat > docker-compose.yml << 'EOF'
            services:
              elasticsearch:
                image: elasticsearch:8.17.4
                container_name: deenji_elasticsearch
                environment:
                  - discovery.type=single-node
                  - xpack.security.enabled=false
                  - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
                ulimits:
                  memlock:
                    soft: -1
                    hard: -1
                volumes:
                  - es_data:/usr/share/elasticsearch/data
                ports:
                  - '9200:9200'
                  - '9300:9300'
                mem_limit: 1g
                networks:
                  - external_supabase_network
                  - deenji_network

              deenji-app:
                image: ${REGISTRY}/${IMAGE_NAME}:latest
                container_name: deenji_app
                ports:
                  - '8081:8081'
                env_file:
                  - .env
                environment:
                  - NODE_ENV=production
                  - NITRO_PORT=8081
                  - NITRO_HOST=0.0.0.0
                  - VITE_ELASTICSEARCH_URL=http://elasticsearch:9200
                depends_on:
                  - elasticsearch
                restart: unless-stopped
                networks:
                  - external_supabase_network
                  - deenji_network

            volumes:
              es_data:
                name: deenji_elasticsearch_data

            networks:
              external_supabase_network:
                external: true
                name: supabase_network_deenji-supabase
              deenji_network:
                name: deenji_internal_network
            EOF

            # Create .env file
            cat > .env << EOF
            VITE_production=true
            VITE_supabaseUrl=http://localhost:54321
            baseUrl=https://demo.dunup.ch
            VITE_ELASTICSEARCH_URL=http://localhost:9200
            VITE_supabaseKey=$SUPABASE_ANON_KEY
            DATABASE_URL=$DATABASE_URL
            VITE_GOOGLE_API_KEY=$GOOGLE_API_KEY
            VITE_googleMapsApiKey=$GOOGLE_API_KEY
            VITE_GOOGLE_MAPS_API_KEY=$GOOGLE_API_KEY
            EOF

            # Clean up any previous deployments
            docker compose down || true
            docker container prune -f || true

            # Deploy the application
            docker pull $REGISTRY/$IMAGE_NAME:latest
            docker compose up -d --no-build
